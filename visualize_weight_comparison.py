#!/usr/bin/env python3
"""
ÂèØËßÜÂåñÊùÉÈáçËßÑÂàôÂØπÊØî
ÁîüÊàêÂ≠¶ÁîüKGÂíåÈ°πÁõÆKGÁöÑÊùÉÈáçÂØπÊØîÂõæË°®
"""

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch
import numpy as np

# ËÆæÁΩÆ‰∏≠ÊñáÂ≠ó‰Ωì
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS', 'SimHei', 'DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False


def create_weight_comparison_chart():
    """ÂàõÂª∫ÊùÉÈáçÂØπÊØîÂõæË°®"""
    
    fig = plt.figure(figsize=(18, 12))
    
    # ============= Â∑¶‰æßÔºöÂ≠¶ÁîüKGÊùÉÈáç =============
    ax1 = plt.subplot(1, 2, 1)
    
    student_kg_weights = {
        'STUDIED_MAJOR': 1.0,
        'COMPLETED_COURSE': 1.0,
        'INTERESTED_IN': 1.0,
        'PARTICIPATED_IN_PROJECT': 1.0,
        'PREREQUISITE_FOR': 1.0,
        'TEACHES_SKILL': 0.9,
        'HAS_SKILL (course)': 0.8,
        'HAS_SKILL (project)': 0.75,
        'REQUIRES_SKILL': 0.7,
        'HAS_SKILL (self-taught)': 0.6,
    }
    
    relations = list(student_kg_weights.keys())
    weights = list(student_kg_weights.values())
    
    # È¢úËâ≤Êò†Â∞ÑÔºàÊ†πÊçÆÊùÉÈáçÔºâ
    colors = []
    for w in weights:
        if w == 1.0:
            colors.append('#2ECC71')  # ÁªøËâ≤ - ÊúÄÈ´ò
        elif w >= 0.8:
            colors.append('#3498DB')  # ËìùËâ≤ - È´ò
        elif w >= 0.7:
            colors.append('#F39C12')  # Ê©ôËâ≤ - ‰∏≠
        else:
            colors.append('#E74C3C')  # Á∫¢Ëâ≤ - ‰Ωé
    
    bars1 = ax1.barh(relations, weights, color=colors, alpha=0.8, edgecolor='black', linewidth=1.5)
    
    # Ê∑ªÂä†ÊùÉÈáçÊï∞ÂÄºÊ†áÁ≠æ
    for i, (bar, weight) in enumerate(zip(bars1, weights)):
        ax1.text(weight + 0.02, bar.get_y() + bar.get_height()/2, 
                f'{weight:.2f}', va='center', fontsize=10, fontweight='bold')
    
    ax1.set_xlabel('ÊùÉÈáç (Weight)', fontsize=12, fontweight='bold')
    ax1.set_title('Â≠¶ÁîüÁü•ËØÜÂõæË∞± (Student KG)\nÂÖ≥Á≥ªÊùÉÈáç', fontsize=14, fontweight='bold', pad=15)
    ax1.set_xlim(0, 1.15)
    ax1.grid(axis='x', alpha=0.3, linestyle='--')
    ax1.axvline(x=1.0, color='red', linestyle='--', linewidth=2, alpha=0.5, label='ÊúÄÂ§ßÊùÉÈáç')
    
    # Ê∑ªÂä†ÂèØ‰ø°Â∫¶Ê≥®Èáä
    ax1.text(0.5, -1.5, '‚≠ê ÂèØ‰ø°Â∫¶: ÁªøËâ≤(ÊúÄÈ´ò) > ËìùËâ≤(È´ò) > Ê©ôËâ≤(‰∏≠) > Á∫¢Ëâ≤(‰Ωé)', 
             fontsize=10, ha='center', style='italic')
    
    # ============= Âè≥‰æßÔºöÈ°πÁõÆKGÊùÉÈáç =============
    ax2 = plt.subplot(1, 2, 2)
    
    # È°πÁõÆKGÁöÑÊäÄËÉΩÂàÜÊï∞ËÆ°ÁÆó
    project_kg_data = [
        ('PREREQUISITE_FOR', 1.0, '#2ECC71'),
        ('REQUIRES_MAJOR', 1.0, '#2ECC71'),
        ('INCLUDES_UNIT', 1.0, '#2ECC71'),
        ('TAUGHT_IN', 1.0, '#2ECC71'),
        ('Skill (dual_supported)\nIN20+IN27, √ó1.3', 1.0, '#9B59B6'),  # Á¥´Ëâ≤Ë°®Á§∫Âä†Êàê
        ('Skill (IN20 supported)\n√ó1.0', 0.75, '#3498DB'),
        ('Skill (IN27 supported)\n√ó1.0', 0.75, '#3498DB'),
        ('Skill (PD extended)\n√ó0.8', 0.48, '#E74C3C'),
    ]
    
    relations2 = [item[0] for item in project_kg_data]
    weights2 = [item[1] for item in project_kg_data]
    colors2 = [item[2] for item in project_kg_data]
    
    bars2 = ax2.barh(relations2, weights2, color=colors2, alpha=0.8, edgecolor='black', linewidth=1.5)
    
    # Ê∑ªÂä†ÊùÉÈáçÊï∞ÂÄºÊ†áÁ≠æ
    for i, (bar, weight) in enumerate(zip(bars2, weights2)):
        ax2.text(weight + 0.02, bar.get_y() + bar.get_height()/2, 
                f'{weight:.2f}', va='center', fontsize=10, fontweight='bold')
    
    ax2.set_xlabel('ÊùÉÈáç (Weight)', fontsize=12, fontweight='bold')
    ax2.set_title('È°πÁõÆÁü•ËØÜÂõæË∞± (Project KG)\nÂÖ≥Á≥ª/ËäÇÁÇπÊùÉÈáç', fontsize=14, fontweight='bold', pad=15)
    ax2.set_xlim(0, 1.15)
    ax2.grid(axis='x', alpha=0.3, linestyle='--')
    ax2.axvline(x=1.0, color='red', linestyle='--', linewidth=2, alpha=0.5, label='ÊúÄÂ§ßÊùÉÈáç')
    
    # Ê∑ªÂä†ËØ¥Êòé
    ax2.text(0.5, -1.8, 'üí° ÊäÄËÉΩÊùÉÈáçÁ§∫‰æãÔºàÂÅáËÆæbase_score=0.6Ôºâ\ndual_supported: 0.6√ó1.3=0.78 | IN20/IN27: 0.6√ó1.0=0.6 | PD: 0.6√ó0.8=0.48', 
             fontsize=9, ha='center', style='italic', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.3))
    
    plt.suptitle('Áü•ËØÜÂõæË∞±ÊùÉÈáçËßÑÂàôÂØπÊØî\nWeight Rules Comparison', 
                 fontsize=18, fontweight='bold', y=0.98)
    
    plt.tight_layout(rect=[0, 0.02, 1, 0.96])
    
    # ‰øùÂ≠ò
    output_file = 'WEIGHT_RULES_COMPARISON.png'
    plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"‚úÖ ÊùÉÈáçÂØπÊØîÂõæÂ∑≤‰øùÂ≠ò: {output_file}")
    plt.close()


def create_weight_flow_diagram():
    """ÂàõÂª∫ÊùÉÈáçÊµÅÁ®ãÂõæ"""
    
    fig, ax = plt.subplots(figsize=(16, 10))
    
    # ÈöêËóèÂùêÊ†áËΩ¥
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')
    
    # ============= Â≠¶ÁîüKGÊµÅÁ®ã =============
    # Ê†áÈ¢ò
    ax.text(2.5, 9.5, 'Â≠¶ÁîüKGÊùÉÈáçÊµÅÁ®ã', fontsize=16, fontweight='bold', ha='center',
            bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', edgecolor='black', linewidth=2))
    
    # Â≠¶ÁîüËäÇÁÇπ
    ax.add_patch(FancyBboxPatch((1, 7.5), 3, 1, boxstyle="round,pad=0.1", 
                                facecolor='#4ECDC4', edgecolor='black', linewidth=2))
    ax.text(2.5, 8, 'Â≠¶Áîü\nSTUDENT', ha='center', va='center', fontsize=12, fontweight='bold')
    
    # ÂàÜÊîØ1: ËØæÁ®ãË∑ØÂæÑ
    ax.arrow(2.5, 7.5, 0, -0.8, head_width=0.2, head_length=0.1, fc='green', ec='green', linewidth=2)
    ax.text(2.8, 7, '1.0', fontsize=10, color='green', fontweight='bold')
    
    ax.add_patch(FancyBboxPatch((1, 5.8), 3, 0.8, boxstyle="round,pad=0.05", 
                                facecolor='#DDA0DD', edgecolor='black', linewidth=1.5))
    ax.text(2.5, 6.2, 'ËØæÁ®ã COURSE', ha='center', va='center', fontsize=11)
    
    ax.arrow(2.5, 5.8, 0, -0.6, head_width=0.2, head_length=0.1, fc='blue', ec='blue', linewidth=2)
    ax.text(2.8, 5.4, '0.9', fontsize=10, color='blue', fontweight='bold')
    
    ax.add_patch(FancyBboxPatch((1, 4.5), 3, 0.7, boxstyle="round,pad=0.05", 
                                facecolor='#45B7D1', edgecolor='black', linewidth=1.5))
    ax.text(2.5, 4.85, 'ÊäÄËÉΩ SKILL', ha='center', va='center', fontsize=11)
    
    # ÂèçÂêëÁÆ≠Â§¥ÔºöÂ≠¶Áîü‚ÜíÊäÄËÉΩ (0.8)
    ax.annotate('', xy=(1.8, 4.7), xytext=(1.8, 7.4),
                arrowprops=dict(arrowstyle='->', lw=2.5, color='orange', linestyle='dashed'))
    ax.text(1.3, 6, '0.8\n(course)', fontsize=9, color='orange', fontweight='bold')
    
    # ÂàÜÊîØ2: È°πÁõÆË∑ØÂæÑ
    ax.arrow(3.5, 7.8, 1, -1.2, head_width=0.2, head_length=0.1, fc='green', ec='green', linewidth=2)
    ax.text(4.6, 6.8, '1.0', fontsize=10, color='green', fontweight='bold')
    
    ax.add_patch(FancyBboxPatch((4.5, 5.8), 3, 0.8, boxstyle="round,pad=0.05", 
                                facecolor='#FF6B6B', edgecolor='black', linewidth=1.5))
    ax.text(6, 6.2, 'È°πÁõÆÁªèÂéÜ\nPROJECT_EXP', ha='center', va='center', fontsize=10)
    
    ax.arrow(6, 5.8, 0, -0.6, head_width=0.2, head_length=0.1, fc='brown', ec='brown', linewidth=2)
    ax.text(6.3, 5.4, '0.7', fontsize=10, color='brown', fontweight='bold')
    
    ax.add_patch(FancyBboxPatch((4.5, 4.5), 3, 0.7, boxstyle="round,pad=0.05", 
                                facecolor='#45B7D1', edgecolor='black', linewidth=1.5))
    ax.text(6, 4.85, 'ÊäÄËÉΩ SKILL', ha='center', va='center', fontsize=11)
    
    # ÂèçÂêëÁÆ≠Â§¥ÔºöÂ≠¶Áîü‚ÜíÊäÄËÉΩ (0.75)
    ax.annotate('', xy=(5.2, 4.7), xytext=(3.3, 7.5),
                arrowprops=dict(arrowstyle='->', lw=2.5, color='red', linestyle='dashed'))
    ax.text(4, 6, '0.75\n(project)', fontsize=9, color='red', fontweight='bold')
    
    # ÂàÜÊîØ3: Ëá™Â≠¶Ë∑ØÂæÑ
    ax.annotate('', xy=(3.5, 4.85), xytext=(3.5, 7.5),
                arrowprops=dict(arrowstyle='->', lw=2.5, color='purple', linestyle='dotted'))
    ax.text(3.8, 6, '0.6\n(self)', fontsize=9, color='purple', fontweight='bold')
    
    # ============= È°πÁõÆKGÊµÅÁ®ã =============
    ax.text(7.5, 9.5, 'È°πÁõÆKGÊùÉÈáçÊµÅÁ®ã', fontsize=16, fontweight='bold', ha='center',
            bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgreen', edgecolor='black', linewidth=2))
    
    # È°πÁõÆËäÇÁÇπ
    ax.add_patch(FancyBboxPatch((6, 7.5), 3, 1, boxstyle="round,pad=0.1", 
                                facecolor='#FF6B6B', edgecolor='black', linewidth=2))
    ax.text(7.5, 8, 'È°πÁõÆ\nPROJECT', ha='center', va='center', fontsize=12, fontweight='bold')
    
    # ÊäÄËÉΩÂàÜÁ±ª
    ax.arrow(7.5, 7.5, 0, -0.5, head_width=0.2, head_length=0.1, fc='black', ec='black', linewidth=2)
    
    # Dual supported
    ax.add_patch(FancyBboxPatch((6, 6.2), 1.3, 0.6, boxstyle="round,pad=0.05", 
                                facecolor='#9B59B6', edgecolor='black', linewidth=1.5))
    ax.text(6.65, 6.5, 'Dual\n√ó1.3', ha='center', va='center', fontsize=9, fontweight='bold', color='white')
    
    # IN20
    ax.add_patch(FancyBboxPatch((6, 5.4), 1.3, 0.6, boxstyle="round,pad=0.05", 
                                facecolor='#3498DB', edgecolor='black', linewidth=1.5))
    ax.text(6.65, 5.7, 'IN20\n√ó1.0', ha='center', va='center', fontsize=9, fontweight='bold', color='white')
    
    # IN27
    ax.add_patch(FancyBboxPatch((7.5, 5.4), 1.3, 0.6, boxstyle="round,pad=0.05", 
                                facecolor='#3498DB', edgecolor='black', linewidth=1.5))
    ax.text(8.15, 5.7, 'IN27\n√ó1.0', ha='center', va='center', fontsize=9, fontweight='bold', color='white')
    
    # PD
    ax.add_patch(FancyBboxPatch((7.5, 6.2), 1.3, 0.6, boxstyle="round,pad=0.05", 
                                facecolor='#E74C3C', edgecolor='black', linewidth=1.5))
    ax.text(8.15, 6.5, 'PD\n√ó0.8', ha='center', va='center', fontsize=9, fontweight='bold', color='white')
    
    # UNITËäÇÁÇπ
    ax.add_patch(FancyBboxPatch((6, 3.8), 3, 0.7, boxstyle="round,pad=0.05", 
                                facecolor='#96CEB4', edgecolor='black', linewidth=1.5))
    ax.text(7.5, 4.15, 'ËØæÁ®ã UNIT', ha='center', va='center', fontsize=11)
    
    # ËøûÊé•ÊäÄËÉΩÂà∞UNIT
    ax.arrow(6.65, 5.4, 0, -0.5, head_width=0.15, head_length=0.08, fc='green', ec='green', linewidth=1.5)
    ax.text(6.3, 4.9, '1.0', fontsize=9, color='green', fontweight='bold')
    
    # Âõæ‰æã
    legend_y = 2.5
    ax.text(5, legend_y + 0.5, 'üìä ÊùÉÈáçËØ¥Êòé', fontsize=14, fontweight='bold')
    ax.text(5, legend_y, '‚Ä¢ ÂÆûÁ∫øÁÆ≠Â§¥: Áõ¥Êé•ÂÖ≥Á≥ª', fontsize=10)
    ax.text(5, legend_y - 0.3, '‚Ä¢ ËôöÁ∫øÁÆ≠Â§¥: Èó¥Êé•Êé®ÂØº', fontsize=10)
    ax.text(5, legend_y - 0.6, '‚Ä¢ Êï∞Â≠ó: ÊùÉÈáçÂÄº', fontsize=10)
    ax.text(5, legend_y - 0.9, '‚Ä¢ È¢úËâ≤: Áªø(1.0) > Ëìù(0.9) > Ê©ô(0.8) > Á∫¢(‚â§0.75)', fontsize=10)
    
    plt.title('Áü•ËØÜÂõæË∞±ÊùÉÈáçËÆ°ÁÆóÊµÅÁ®ãÂõæ\nWeight Calculation Flow', fontsize=18, fontweight='bold', pad=20)
    
    output_file = 'WEIGHT_FLOW_DIAGRAM.png'
    plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"‚úÖ ÊùÉÈáçÊµÅÁ®ãÂõæÂ∑≤‰øùÂ≠ò: {output_file}")
    plt.close()


def main():
    print("=" * 60)
    print("ÁîüÊàêÊùÉÈáçËßÑÂàôÂèØËßÜÂåñÂõæË°®")
    print("=" * 60)
    
    create_weight_comparison_chart()
    create_weight_flow_diagram()
    
    print("\n" + "=" * 60)
    print("‚úÖ ÂÆåÊàêÔºÅÁîüÊàê‰∫Ü‰ª•‰∏ãÊñá‰ª∂:")
    print("  1. WEIGHT_RULES_COMPARISON.png - ÊùÉÈáçÂØπÊØîÊü±Áä∂Âõæ")
    print("  2. WEIGHT_FLOW_DIAGRAM.png - ÊùÉÈáçÊµÅÁ®ãÂõæ")
    print("=" * 60)


if __name__ == "__main__":
    main()

